{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2006-06-25-stl-and-its-trees/","result":{"data":{"site":{"siteMetadata":{"title":"Lambdacurry"}},"markdownRemark":{"id":"39ee6a98-885f-5093-b9c5-9fee8a0c0ac6","excerpt":"Very recently I had a problem with STL maps and the way it organizes data - come to think of it, it was an incorrect way of using it. So the premise is simple…","html":"<p>Very recently I had a problem with STL maps and the way it organizes data - come to think of it, it was an incorrect way of using it.</p>\n<p>So the premise is simple - Have a composite class <strong>pointer</strong>  be the index into the map. The composite class can be constructed in very funky ways, so that simple pointer comparison to find the key in the map is not possible.</p>\n<p>Now, maps usine Red-Black trees internally, with - the required <a href=\"http://www.sgi.com/tech/stl/StrictWeakOrdering.html\">Strict Weak Ordering</a> criteria (iff a&#x3C;b and b&#x3C;a, then a match is found).</p>\n<p>Now it took some investigation into the <em>insert\\</em>unique_ and <em>\\</em>M_insert_ functions of <em>stl\\</em>tree.h_ to figure it out. </p>\n<p>When trying to find an element, the RB-tree algo starts comparing <strong>tree-element to candidate</strong>. If <em>less\\</em>than_ is true, then go right and take new tree-element. If <em>less\\</em>than_ is false, then go left and remember the tree-element is candidate. After all elements are done, then compare <strong>candidate to tree-element</strong> (notice the inversion). If that is ALSO false, then we have a match. In essence it is trying to find the deepest element in the tree that passes the strict weak ordering test with candidate. Now in case of insert, it again does a find in the other order - i.e. first <strong>candidate to tree-element</strong> (go left in case of success) and then at the end (with no more nodes), <strong>tree-element to candidate.</strong> Now here comes the interesting part, if the second check is also true then that is one condition of “strict weak ordering” - the subsequent  call to _M_insert checks for the other condition. Now it adds it to the left-child (if strict-weak-ordering passes, so that subsequent find works well) and right-child (if strict-weak-ordering fails). All well and good. Now comes my blunder - I created a <em>less\\</em>than_ function that imposes a <strong><em>double check</em></strong>. i.e.</p>\n<p><strong>condition X || conditon Y were true    return false else    return true;</strong> Now the problem with this was very simple - the need for two conditions arose because I thought I could devise a method of ordering differently from finding. What that means is that I could use <strong>condition X</strong> for ordering and <strong>condition Y</strong> for finding. Why could’nt I have AND’ed them both then? That is because <strong>condition X</strong>  was not enforced on creation. Take for example <strong>A + B</strong> . It is equal to <strong>B + A</strong>. But how do I check for both of them - let me begin by giving them an id number, which is a simple counter. If id’s match then it is trivial equality (<strong>condition X)</strong>. However both could have different id’s based on time of creation. Then I have to check for all elements in the two tuples (<strong>condition Y</strong>) Now what happens in the condition I impose is that - Red-Black trees re-balance after a few steps. That means that the way I pushed them in will no longer be the way I can search for them (because of the <strong>||</strong>  condition) and therefore it fails. However there is another way to search for it - a little expensive but clean and predictable none-the-less. del.icio.us Tags: <a href=\"http://del.icio.us/sss8ue/software\">software</a> <a href=\"http://del.icio.us/sss8ue/c++\">c++</a></p>","frontmatter":{"title":"STL and its trees","date":"June 25, 2006"}}},"pageContext":{"slug":"/blog/2006-06-25-stl-and-its-trees/","previous":{"fields":{"slug":"/blog/2006-06-20-opera-9-cathedral-vs-the-bazaar/"},"frontmatter":{"title":"Opera 9 : Cathedral Vs The Bazaar"}},"next":{"fields":{"slug":"/blog/2006-06-25-arcelor-mittal-hah-mittal-arcelor/"},"frontmatter":{"title":"Arcelor-Mittal? hah...  Mittal-Arcelor"}}}},"staticQueryHashes":["2778469899","2841359383","2882394463","3616023293"]}