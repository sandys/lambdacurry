{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2008-07-11-_vimrc/","result":{"data":{"site":{"siteMetadata":{"title":"Lambdacurry"}},"markdownRemark":{"id":"41e9402d-21a1-512c-8b6e-ffb3ecf2ab30","excerpt":"[sourcecode lang=“xml”] set ic set autoindent set nocompatible set ruler set showcmd set laststatus=2 set ttyfast ” Indicates a fast terminal connection “set…","html":"<p>[sourcecode lang=“xml”]</p>\n<p>set ic set autoindent set nocompatible set ruler set showcmd set laststatus=2 set ttyfast ” Indicates a fast terminal connection “set statusline=%=%f\\ \\“%F\\”\\ %m%R\\ [%4l(%3p%%):%3c-(0x%2B,\\0%2b),%Y,%{&#x26;encoding}] set statusline=%=%F%m%r%h%w\\ [FORMAT=%{&#x26;ff}]\\ [TYPE=%Y]\\ [ASCII=\\%03.3b]\\ [HEX=\\%02.2B]\\ [POS=%04l,%04v][%p%%]\\ [LEN=%L]</p>\n<p>set tabstop=2 set shiftwidth=2</p>\n<p>” Bad… slows stuff down to a crawl “filetype plugin indent on</p>\n<p>” Do clever indent things. Don’t make a # force column zero. set autoindent set smartindent inoremap # X<BS>#</p>\n<p>set smarttab set expandtab set hlsearch set incsearch set nowrap set showfulltag ” Wrap on these “set listchars+=precedes:&#x3C;,extends:> set whichwrap+=&#x3C;,>,[,]</p>\n<p>” Use the cool tab complete menu set wildmenu set wildignore=*.o,*~</p>\n<p>“This is supposed to issue shortmessages in various situations “I have no clue - from <a href=\"http://jmcantrell.me/files/vimrc.html\">http://jmcantrell.me/files/vimrc.html</a> set shortmess=aTItoO ” |||||| ” |||||+— Message for reading file overwrites previous ” ||||+--- Don’t prompt to overwrite file ” |||+---- Truncate file at start if too long ” ||+----- Disable intro message ” |+------ Truncate messages in the middle if too long</p>\n<p>set infercase ” Try to adjust insert completions for case set completeopt=longest,menu,menuone ” | | | ” | | +— Show popup even with one match ” | +------- Use popup menu with completions ” +--------------- Insert longest completion match</p>\n<p>set wildmenu ” Enable wildmenu for completion set wildmode=longest:full,list:full ” | | ” | +— List matches, complete first match ” +--------------- Complete longest prefix, use wildmenu</p>\n<p>” this makes the mouse paste a block of text without formatting it ” (good for code) map <MouseMiddle> <esc>”*p</p>\n<p>set splitright ” When splitting vertically, split to the right set splitbelow ” When splitting horizontally, split below</p>\n<p>“This enables windows shortcuts (so sue me) ”<a href=\"http://vim.wikia.com/wiki/Enabling%5C_Windows%5C_shortcuts%5C_for%5C_gvim\">http://vim.wikia.com/wiki/Enabling\\_Windows\\_shortcuts\\_for\\_gvim</a> set winaltkeys=yes</p>\n<p>“split management set winheight=2 “even when minimized show two lines “maximize split map <C-J> <C-W>j<C-W>_ “minimize split map <C-K> <C-W>k<C-W>_ “reduce size by one line map <C-M> <C-W>-</p>\n<p>” No icky toolbar, menu or scrollbars in the GUI if has(‘gui’) set guioptions-=m set guioptions-=T set guioptions-=l set guioptions-=L set guioptions-=r set guioptions-=R end</p>\n<p>“I’m so propah… I’m falling over meself set lcs+=tab:▷⋅ ” Right triangle and middle dot for tab chars set lcs+=extends:› ” Right single angle for chars right of the screen set lcs+=precedes:‹ ” Left single angle for chars left of the screen set lcs+=nbsp:· ” Middle dot for non-breaking spaces set lcs+=trail:· ” Middle dot for trailing spaces</p>\n<p>” Quickfix navigation nmap <silent> gc :cnext<cr> nmap <silent> gC :cprev<cr></p>\n<p>” Location list navigation nmap <silent> gl :lnext<cr> nmap <silent> gL :lprev<cr></p>\n<p>” Buffer navigation nmap <silent> gb :bnext<cr> nmap <silent> gB :bprev<cr></p>\n<p>” Jumplist navigation nnoremap <silent> g<backspace> <c-o> nnoremap <silent> g<return> <c-i></p>\n<p>” Fix commas without a following space nmap <silent> <leader>x, :%s/,\\zs\\ze[^\\s]/ /gc<cr> ” Fix , with leading spaces nmap <silent> <leader>x, :silent! %s/\\s\\+,/,/gc<cr></p>\n<p>” turn off any existing search au VimEnter * nohls</p>\n<p>” Redraw screen and remove search highlights if u press ctrl-l “Life Saver !! nnoremap <silent> <c-l> :nohl<cr><c-l></p>\n<p>:nmap <C-p> :tabprevious<cr> :nmap <C-n> :tabnext<cr> “:map <C-S-tab> :tabprevious<cr> “:map <C-tab> :tabnext<cr> “:imap <C-S-tab> <ESC>:tabprevious<cr>i “:imap <C-tab> <ESC>:tabnext<cr>i “:nmap <C-w> :tabclose<cr> “:imap <C-t> <ESC>:tabnew<cr> :map <C-S-n> <ESC>:tabnew<cr></p>\n<p>“colors default “syntax on “set guifont=Consolas:h11:cANSI “set guifont=Monaco\\ 10 “set guifont=Terminus/12/-1/5/50/0/0/0/0/0 “set guifont=Bitstream\\ Vera\\ Sans\\ Mono\\ 11 set guifont=Anonymous\\ Pro\\ 12 “set guifont=Inconsolata\\ 12 “set guifont=Terminus\\ 13 “colorscheme zenburn “colorscheme inkpot “colorscheme wombat “colorscheme sunburst “colorscheme desert</p>\n<p>“let g:molokai_original = 0 “colorscheme molokai</p>\n<p>“colorscheme xoria256 colorscheme inspiration694250 “colorscheme argonaut</p>\n<p>“windows specific “syntax enable “let mysyntaxfile = “C:/Documents and Settings/Administrator/railcasts.vim” “let mysyntaxfile = “C:/Documents and Settings/Administrator/inkpot.vim”</p>\n<p>“au BufRead,BufNewFile *.v set filetype=verilog “au! Syntax VERILOG source “C:/Documents and Settings/Administrator/verilog.vim” “source C:\\Documents and Settings\\Administrator\\verilog.vim ” This file is located at: C:\\Documents and Settings\\username\\_vimrc</p>\n<p>“the following comment functions allow you to highlight a section ” and press ,c (comma c) to comment and ,d (comma d) to uncomment “comments will happen according to language</p>\n<p>function! VHDLCommentMap() vmap ,c :s/^/–/ vmap ,d :s/^–// endfunction</p>\n<p>function! VerilogCommentMap() vmap ,c :s/^/\\/\\// vmap ,d :s/^\\/\\/// endfunction</p>\n<p>function! PythonCommentMap() vmap ,c :s/^/#/ vmap ,d :s/^#// endfunction</p>\n<p>autocmd FileType vhdl call VHDLCommentMap() autocmd FileType verilog,cpp,c call VerilogCommentMap() autocmd FileType tcl,perl,python,ruby call PythonCommentMap()</p>\n<p>“folding settings “set foldmethod=indent “fold based on indent “set foldnestmax=3 “deepest fold is 3 levels “set nofoldenable “dont fold by default</p>\n<p>\"\" Folding and unfolding \"\"map ,f :set foldmethod=indent<cr>zM<cr> \"\"map ,F :set foldmethod=manual<cr>zR<cr></p>\n<p>[/sourcecode]</p>","frontmatter":{"title":"_vimrc","date":"July 11, 2008"}}},"pageContext":{"slug":"/blog/2008-07-11-_vimrc/","previous":{"fields":{"slug":"/blog/2008-07-11-powershell-config/"},"frontmatter":{"title":"Powershell Config"}},"next":{"fields":{"slug":"/blog/2008-09-13-laptop-bags-why-so-bad/"},"frontmatter":{"title":"Laptop bags - why so bad?"}}}},"staticQueryHashes":["2778469899","2841359383","2882394463","3616023293"]}