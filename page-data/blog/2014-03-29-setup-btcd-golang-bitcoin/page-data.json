{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-03-29-setup-btcd-golang-bitcoin/","result":{"data":{"site":{"siteMetadata":{"title":"Lambdacurry"}},"markdownRemark":{"id":"9dfa27e6-4314-5e91-ab43-1effc250c381","excerpt":"My last post was about setting up the build system for Bitcoin reference system 0.9.0. There is an alternative architecture for Bitcoin called btcd which is…","html":"<p>My last post was about <a href=\"http://www.lambdacurry.com/2014/03/compiling-bitcoin-0-9-0-transaction-malleability-fix/\">setting up</a> the build system for Bitcoin reference system 0.9.0.</p>\n<p>There is an alternative architecture for Bitcoin called <em>btcd</em> which is developed by Conformal Systems. This is claimed to be compatible with the main blockchain (including bugs).</p>\n<p>There is a very interesting <a href=\"https://bitcointa.lk/threads/calling-out-the-bitcoin-foundation-scam.273069/page-10\">thread</a> about how the btcd architecture (especially the split wallet/client and daemon architecture) has been adopted in the reference client at 0.9.0</p>\n<p>I find Go very, very pleasant and productive to work and understand and it’s package manager is absolutely brilliant.</p>\n<p>To setup your machine to work with btcd is absolutely trivial. Remember that this should be the **same **on any platform (Windows, Linux and Mac) since Go is cross platform in general. Only the particular binary of Go would be different.</p>\n<p>Download and unpack Go from <a href=\"http://code.google.com/p/go/downloads/list\">http://code.google.com/p/go/downloads/list</a> . I used <a href=\"http://code.google.com/p/go/downloads/detail?name=go1.2.1.linux-amd64.tar.gz&#x26;can=2&#x26;q=\">http://code.google.com/p/go/downloads/detail?name=go1.2.1.linux-amd64.tar.gz&#x26;can=2&#x26;q=</a> because I’m on Linux-64 bit but go ahead and use the one that you’re on.</p>\n<p>Assuming you unzip it to /home/sss/Code/go, set the following variable:</p>\n<p><code class=\"language-text\">export GOROOT=/home/sss/Code/go</code></p>\n<p>Test your Go installation by running _/home/sss/Code/go -v _. Ideally this environment variable should be in your zshrc, bashrc, etc. This never changes.</p>\n<p>Now, create a directory called <em>/home/sss/Code/mybtcd.</em> This is your <strong>new workspace</strong>. When you are working on a particular workspace, set the following environment variable:</p>\n<p><code class=\"language-text\">export GOPATH=/home/sss/Code/mybtcd</code></p>\n<p>This tells your Go package manager, the location of your top level workspace directory.</p>\n<p>Now, to get btcd and all its dependencies as well as compile it in one shot, run:</p>\n<p><code class=\"language-text\">/home/sss/Code/go/bin/go get github.com/conformal/btcd/...</code></p>\n<p>After a few minutes, you should have the following directories (which complies with Go’s <a href=\"http://golang.org/doc/code.html\">recommended workspace directory structure</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"./bin/-> all your binaries\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-./bin/-> all your binaries line-numbers\"><code class=\"language-./bin/-> all your binaries\">\n./pkg/ -&gt; all third party library dependencies\n\n./src/ -&gt; all btcd as well as dependent third party source.```\n\n\nRunning your bitcoin daemon is simply _./bin/btcd _(help is at _./bin/btcd --help_)\n\nTo hack your code, just write your code in _./src/github.com/conformal/btcd/ _and run\n\n\n&gt;~/Code/go/bin/go install -v -x  github.com/conformal/btcd/\n\n\nAll dependencies and binaries get rebuilt. Simple.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"Setting up btcd + Go build for bitcoin","date":"March 29, 2014"}}},"pageContext":{"slug":"/blog/2014-03-29-setup-btcd-golang-bitcoin/","previous":{"fields":{"slug":"/blog/2014-03-29-compiling-bitcoin-0-9-0-transaction-malleability-fix/"},"frontmatter":{"title":"Compiling bitcoin 0.9.0 - the transaction malleability fix"}},"next":{"fields":{"slug":"/blog/2014-10-19-systemd-nice-dont-afraid/"},"frontmatter":{"title":"systemd is nice. Dont be afraid."}}}},"staticQueryHashes":["2778469899","2841359383","2882394463","3616023293"]}